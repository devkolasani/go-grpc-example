// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: arithmetic/arithmetic.proto

package arithmetic

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ArithmeticClient is the client API for Arithmetic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArithmeticClient interface {
	Operation(ctx context.Context, in *OperationRequest, opts ...grpc.CallOption) (*OperationResponse, error)
}

type arithmeticClient struct {
	cc grpc.ClientConnInterface
}

func NewArithmeticClient(cc grpc.ClientConnInterface) ArithmeticClient {
	return &arithmeticClient{cc}
}

func (c *arithmeticClient) Operation(ctx context.Context, in *OperationRequest, opts ...grpc.CallOption) (*OperationResponse, error) {
	out := new(OperationResponse)
	err := c.cc.Invoke(ctx, "/arithmetic.Arithmetic/Operation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArithmeticServer is the server API for Arithmetic service.
// All implementations must embed UnimplementedArithmeticServer
// for forward compatibility
type ArithmeticServer interface {
	Operation(context.Context, *OperationRequest) (*OperationResponse, error)
	mustEmbedUnimplementedArithmeticServer()
}

// UnimplementedArithmeticServer must be embedded to have forward compatible implementations.
type UnimplementedArithmeticServer struct {
}

func (UnimplementedArithmeticServer) Operation(context.Context, *OperationRequest) (*OperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Operation not implemented")
}
func (UnimplementedArithmeticServer) mustEmbedUnimplementedArithmeticServer() {}

// UnsafeArithmeticServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArithmeticServer will
// result in compilation errors.
type UnsafeArithmeticServer interface {
	mustEmbedUnimplementedArithmeticServer()
}

func RegisterArithmeticServer(s grpc.ServiceRegistrar, srv ArithmeticServer) {
	s.RegisterService(&Arithmetic_ServiceDesc, srv)
}

func _Arithmetic_Operation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArithmeticServer).Operation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arithmetic.Arithmetic/Operation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArithmeticServer).Operation(ctx, req.(*OperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Arithmetic_ServiceDesc is the grpc.ServiceDesc for Arithmetic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Arithmetic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arithmetic.Arithmetic",
	HandlerType: (*ArithmeticServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Operation",
			Handler:    _Arithmetic_Operation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "arithmetic/arithmetic.proto",
}
